{"ast":null,"code":"var _jsxFileName = \"D:\\\\simple_redux\\\\src\\\\components\\\\Counter.js\";\nimport { Component } from \"react\";\nimport classes from \"./Counter.module.css\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /* const Counter = () => {\n  const dispatch = useDispatch();\n  const counter = useSelector((state) => state.counter);\n  // we use useselector not to get the whole value store\n  // but to select the spcific value from the redux store\n  // two function for increment and decrement\n  const incrementHandler = () => {\n   dispatch({ type: \"INCREMENT\" });\n  };\n  const decrementHandler = () => {\n   dispatch({ type: \"DECREMENT\" });\n  };\n  const toggleCounterHandler = () => {};\n  return (\n   <main className={classes.counter}>\n     <h1>Redux Counter</h1>\n     <div className={classes.value}>{counter}</div>\n     <div>\n       <button onClick={incrementHandler}>Increment</button>\n       <button onClick={decrementHandler}>Decrement</button>\n     </div>\n     <button onClick={toggleCounterHandler}>Toggle Counter</button>\n   </main>\n  );\n  };*/\n} // doing same thing via class component\n\nclass Counter extends Component {\n  incrementHandler() {\n    this.props.increment();\n  }\n\n  decrementHandler() {\n    this.props.decrement();\n  }\n\n  toggleCounterHandler() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: classes.counter,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Redux Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.value,\n        children: this.props.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.incrementHandler.bind(this),\n          children: \"Increment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.decrementHandler.bind(this),\n          children: \"Decrement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleCounterHandler.bind(this),\n        children: \"Toggle Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n} // this function in class component are equivalent to\n// usedispatch and useselector\n// useselector\n\n\nconst mapStateToProps = state => {\n  return {\n    counter: state.counter\n  };\n}; // usedispatch\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => dispatch({\n      type: \"increment\"\n    }),\n    decrement: () => dispatch({\n      type: \"decrement\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"names":["Component","classes","useSelector","useDispatch","connect","Counter","incrementHandler","props","increment","decrementHandler","decrement","toggleCounterHandler","render","counter","value","bind","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"sources":["D:/simple_redux/src/components/Counter.js"],"sourcesContent":["import { Component } from \"react\";\nimport classes from \"./Counter.module.css\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\n\n { /* const Counter = () => {\n  const dispatch = useDispatch();\n  const counter = useSelector((state) => state.counter);\n  // we use useselector not to get the whole value store\n  // but to select the spcific value from the redux store\n  // two function for increment and decrement\n\n  const incrementHandler = () => {\n    dispatch({ type: \"INCREMENT\" });\n  };\n\n  const decrementHandler = () => {\n    dispatch({ type: \"DECREMENT\" });\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};*/}\n\n\n// doing same thing via class component\n\n\nclass Counter extends Component {\n  incrementHandler() { this.props.increment()}\n  decrementHandler() {this.props.decrement()}\n  toggleCounterHandler() {}\n\n  render() {\n    return (\n      <main className={classes.counter}>\n        <h1>Redux Counter</h1>\n        <div className={classes.value}>{this.props.counter}</div>\n        <div>\n          <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n          <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n        </div>\n        <button onClick={this.toggleCounterHandler.bind(this)}>Toggle Counter</button>\n      </main>\n    );\n  }\n}\n\n// this function in class component are equivalent to\n// usedispatch and useselector\n// useselector\n\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.counter,\n  };\n};\n// usedispatch\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: \"increment\" }),\n    decrement: () => dispatch({ type: \"decrement\" }),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAkD,aAAlD;;AAEC;EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIK,C,CAGL;;AAGA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;EAC9BM,gBAAgB,GAAG;IAAE,KAAKC,KAAL,CAAWC,SAAX;EAAuB;;EAC5CC,gBAAgB,GAAG;IAAC,KAAKF,KAAL,CAAWG,SAAX;EAAuB;;EAC3CC,oBAAoB,GAAG,CAAE;;EAEzBC,MAAM,GAAG;IACP,oBACE;MAAM,SAAS,EAAEX,OAAO,CAACY,OAAzB;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAEZ,OAAO,CAACa,KAAxB;QAAA,UAAgC,KAAKP,KAAL,CAAWM;MAA3C;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,wBACE;UAAQ,OAAO,EAAE,KAAKP,gBAAL,CAAsBS,IAAtB,CAA2B,IAA3B,CAAjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAQ,OAAO,EAAE,KAAKN,gBAAL,CAAsBM,IAAtB,CAA2B,IAA3B,CAAjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,eAOE;QAAQ,OAAO,EAAE,KAAKJ,oBAAL,CAA0BI,IAA1B,CAA+B,IAA/B,CAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AAjB6B,C,CAoBhC;AACA;AACA;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;EACjC,OAAO;IACLJ,OAAO,EAAEI,KAAK,CAACJ;EADV,CAAP;AAGD,CAJD,C,CAKA;;;AACA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;EACvC,OAAO;IACLX,SAAS,EAAE,MAAMW,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAR,CAAD,CADpB;IAELV,SAAS,EAAE,MAAMS,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAR,CAAD;EAFpB,CAAP;AAID,CALD;;AAMA,eAAehB,OAAO,CAACY,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,OAA7C,CAAf"},"metadata":{},"sourceType":"module"}