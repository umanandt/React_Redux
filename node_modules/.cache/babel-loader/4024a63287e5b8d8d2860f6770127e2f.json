{"ast":null,"code":"//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"; // we are using configure store instead of create store\n//because it can handle multiple reducer\n//import { createReducer } from 'redux';\n// there are two things that you can import\n// createSlice & create reducer that is provided by\n// redux toolkit to make coding easy and managebel\n// npm install @reduxjs/toolkit\n\nconst intialValue = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  // name could be anything - slice name\n  initialState: intialValue,\n  reducers: {\n    // we have used four condition that's why we need\n    increment(state) {\n      // four function in reducer -\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // action.amount\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthValue = {\n  isAuthenticated: false\n};\nconst loginSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthValue,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\n/* const counterReducer = (state = intialValue, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n  return state;\r\n};*/\n//const store = createStore(counterSlice.reducer);\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: loginSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const loginActions = loginSlice.actions;\nexport default store; // here we are not dispatching action to the data\n//here we are not subcribing to the data\n// here we have made reducer function and a store and passed the value of\n// function to the store (create reducer)","map":{"version":3,"names":["createSlice","configureStore","intialValue","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthValue","isAuthenticated","loginSlice","login","logout","store","reducer","auth","counterActions","actions","loginActions"],"sources":["D:/simple_redux/src/store/index.js"],"sourcesContent":["//import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// we are using configure store instead of create store\r\n//because it can handle multiple reducer\r\n\r\n//import { createReducer } from 'redux';\r\n// there are two things that you can import\r\n// createSlice & create reducer that is provided by\r\n// redux toolkit to make coding easy and managebel\r\n// npm install @reduxjs/toolkit\r\n\r\nconst intialValue = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\", // name could be anything - slice name\r\n  initialState: intialValue,\r\n  reducers: {\r\n    // we have used four condition that's why we need\r\n    increment(state) {\r\n      // four function in reducer -\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload; // action.amount\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthValue = { isAuthenticated: false };\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: initialAuthValue,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n/* const counterReducer = (state = intialValue, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n  return state;\r\n};*/\r\n\r\n//const store = createStore(counterSlice.reducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {counter: counterSlice.reducer, auth: loginSlice.reducer},\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const loginActions = loginSlice.actions;\r\n\r\nexport default store;\r\n\r\n// here we are not dispatching action to the data\r\n//here we are not subcribing to the data\r\n// here we have made reducer function and a store and passed the value of\r\n// function to the store (create reducer)\r\n"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAApB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SADyB;EACd;EACjBC,YAAY,EAAEL,WAFiB;EAG/BM,QAAQ,EAAE;IACR;IACAC,SAAS,CAACC,KAAD,EAAQ;MACf;MACAA,KAAK,CAACP,OAAN;IACD,CALO;;IAMRQ,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CARO;;IASRS,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADsB,CAC0B;IACjD,CAXO;;IAYRC,aAAa,CAACL,KAAD,EAAQ;MACnBA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;IACD;;EAdO;AAHqB,CAAD,CAAhC;AAqBA,MAAMY,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAnB,CAAzB;AAEA,MAAMC,UAAU,GAAGlB,WAAW,CAAC;EAC7BM,IAAI,EAAE,MADuB;EAE7BC,YAAY,EAAES,gBAFe;EAG7BR,QAAQ,EAAE;IACRW,KAAK,CAACT,KAAD,EAAQ;MACXA,KAAK,CAACO,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAKRG,MAAM,CAACV,KAAD,EAAQ;MACZA,KAAK,CAACO,eAAN,GAAwB,KAAxB;IACD;;EAPO;AAHmB,CAAD,CAA9B;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IAACnB,OAAO,EAAEE,YAAY,CAACiB,OAAvB;IAAgCC,IAAI,EAAEL,UAAU,CAACI;EAAjD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AACP,OAAO,MAAMC,YAAY,GAAGR,UAAU,CAACO,OAAhC;AAEP,eAAeJ,KAAf,C,CAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}