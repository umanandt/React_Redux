{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\"; //import { createReducer } from 'redux';\n// there are two things that you can import\n// createSlice & create reducer that is provided by\n// redux toolkit to make coding easy and managebel\n// npm install @reduxjs/toolkit\n\nconst intialValue = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  // name could be anything - slice name\n  initialState: intialValue,\n  reducer: {\n    // we have used four condition that's why we need\n    increment(state) {\n      // four function in reducer -\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n/* const counterReducer = (state = intialValue, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n  return state;\r\n};*/\n\nconst store = createStore(counterSlice.reducer);\nexport default store; // here we are not dispatching action to the data\n//here we are not subcribing to the data\n// here we have made reducer function and a store and passed the value of\n// function to the store (create reducer)","map":{"version":3,"names":["createStore","createSlice","intialValue","counter","showCounter","counterSlice","name","initialState","reducer","increment","state","decrement","increase","action","amount","toggleCounter","store"],"sources":["D:/simple_redux/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//import { createReducer } from 'redux';\r\n// there are two things that you can import\r\n// createSlice & create reducer that is provided by\r\n// redux toolkit to make coding easy and managebel\r\n// npm install @reduxjs/toolkit\r\n\r\nconst intialValue = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\", // name could be anything - slice name\r\n  initialState: intialValue,\r\n  reducer: {                      // we have used four condition that's why we need\r\n    increment(state) {                // four function in reducer -\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    }, \r\n    increase(state, action) {\r\n      state.counter = state.counter + action.amount; \r\n    }, \r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n/* const counterReducer = (state = intialValue, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n  return state;\r\n};*/\r\n\r\nconst store = createStore(counterSlice.reducer);\r\n\r\nexport default store;\r\n\r\n// here we are not dispatching action to the data\r\n//here we are not subcribing to the data\r\n// here we have made reducer function and a store and passed the value of\r\n// function to the store (create reducer)\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAApB;AAEA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SADyB;EACd;EACjBC,YAAY,EAAEL,WAFiB;EAG/BM,OAAO,EAAE;IAAuB;IAC9BC,SAAS,CAACC,KAAD,EAAQ;MAAiB;MAChCA,KAAK,CAACP,OAAN;IACD,CAHM;;IAIPQ,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CANM;;IAOPS,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,MAAvC;IACD,CATM;;IAUPC,aAAa,CAACL,KAAD,EAAQ;MACnBA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;IACD;;EAZM;AAHsB,CAAD,CAAhC;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMY,KAAK,GAAGhB,WAAW,CAACK,YAAY,CAACG,OAAd,CAAzB;AAEA,eAAeQ,KAAf,C,CAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}