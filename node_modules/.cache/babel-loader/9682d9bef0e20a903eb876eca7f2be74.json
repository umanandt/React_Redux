{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"redux\"; //import { createReducer } from 'redux';\n// there are two things that you can import\n// createSlice & create reducer that is provided by\n// redux toolkit to make coding easy and managebel\n// npm install @reduxjs/toolkit\n\nconst intialValue = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: \"counter\",\n  // name could be anything\n  initialState: intialValue,\n  reducer: {\n    // we have used four condition that's why we need\n    increment(state) {\n      // four function in reducer -\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggleCounter() {}\n\n  }\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"INCREMENT\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"DECREMENT\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store; // here we are not dispatching action to the data\n//here we are not subcribing to the data\n// here we have made reducer function and a store and passed the value of\n// function to the store (create reducer)","map":{"version":3,"names":["createStore","createSlice","intialValue","counter","showCounter","name","initialState","reducer","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"sources":["D:/simple_redux/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"redux\";\r\n\r\n//import { createReducer } from 'redux';\r\n// there are two things that you can import\r\n// createSlice & create reducer that is provided by\r\n// redux toolkit to make coding easy and managebel\r\n// npm install @reduxjs/toolkit\r\n\r\nconst intialValue = { counter: 0, showCounter: true };\r\n\r\ncreateSlice({\r\n  name: \"counter\", // name could be anything\r\n  initialState: intialValue,\r\n  reducer: {                      // we have used four condition that's why we need\r\n    increment(state) {                // four function in reducer -\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    }, \r\n    increase(state, action) {\r\n      state.counter = state.counter + action.amount; \r\n    }, \r\n    toggleCounter() {},\r\n  },\r\n});\r\n\r\nconst counterReducer = (state = intialValue, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n\r\n// here we are not dispatching action to the data\r\n//here we are not subcribing to the data\r\n// here we have made reducer function and a store and passed the value of\r\n// function to the store (create reducer)\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAApB;AAEAH,WAAW,CAAC;EACVI,IAAI,EAAE,SADI;EACO;EACjBC,YAAY,EAAEJ,WAFJ;EAGVK,OAAO,EAAE;IAAuB;IAC9BC,SAAS,CAACC,KAAD,EAAQ;MAAiB;MAChCA,KAAK,CAACN,OAAN;IACD,CAHM;;IAIPO,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACN,OAAN;IACD,CANM;;IAOPQ,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;IACD,CATM;;IAUPC,aAAa,GAAG,CAAE;;EAVX;AAHC,CAAD,CAAX;;AAiBA,MAAMC,cAAc,GAAG,YAAiC;EAAA,IAAhCN,KAAgC,uEAAxBP,WAAwB;EAAA,IAAXU,MAAW;;EACtD,IAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO;MACLb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;MAELC,WAAW,EAAEK,KAAK,CAACL;IAFd,CAAP;EAID;;EAED,IAAIQ,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;IAC9B,OAAO;MACLb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAD3B;MAELT,WAAW,EAAEK,KAAK,CAACL;IAFd,CAAP;EAID;;EAED,IAAIQ,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO;MACLb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;MAELC,WAAW,EAAEK,KAAK,CAACL;IAFd,CAAP;EAID;;EAED,IAAIQ,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAO;MACLZ,WAAW,EAAE,CAACK,KAAK,CAACL,WADf;MAELD,OAAO,EAAEM,KAAK,CAACN;IAFV,CAAP;EAID;;EACD,OAAOM,KAAP;AACD,CA7BD;;AA+BA,MAAMQ,KAAK,GAAGjB,WAAW,CAACe,cAAD,CAAzB;AAEA,eAAeE,KAAf,C,CAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}